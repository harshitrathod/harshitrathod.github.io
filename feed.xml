<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Harshit Rathod</title>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <link>https://harshitrathod.github.io//</link>
    <description>An Altruistic Coder</description>
    <pubDate>Sat, 16 Dec 2017 15:36:07 +0530</pubDate>
    
      <item>
        <title>How IntelliJ TODO tool helps in Refactoring</title>
        <link>/2017/12/09/how-intellij-todo-tool-helps-in-refactoring.html</link>
        <guid isPermaLink="true">/2017/12/09/how-intellij-todo-tool-helps-in-refactoring.html</guid>
        <description>&lt;p&gt;Every developer needs to perform refactoring in his Professional career. You need Refactoring when you feel your code is not maintainable or scalable. With complex design some time is it very hard to develop a new feature and refactoring is essential. Refactoring is a very critical task because it can open a door for bugs.&lt;/p&gt;

&lt;p&gt;When I start refactoring, the first thing I do is analyze entire code end to end. I will not code utile I get a good understanding of impact. When I am going through the code I need a way to add comments to a line or method level. This is where IntelliJ TODO tool helps.&lt;/p&gt;

&lt;h3 id=&quot;what-is-intellij-todo-tool&quot;&gt;&lt;strong&gt;What is IntelliJ TODO tool?&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;It’s tool window where you can able to refer all comment which you mentioned in your Tool pattern setting. IntelliJ is continuous scanning project for this TODO pattern and when the pattern matches, display comment on tool window. By default, IntelliJ have two TODO pattern &lt;strong&gt;//TODO&lt;/strong&gt; and &lt;strong&gt;//FixMe&lt;/strong&gt;.  These matches any comment Starting with &lt;strong&gt;//TODO&lt;/strong&gt; and &lt;strong&gt;//FixMe&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To see all your TODO comments open TODO tool windows from &lt;strong&gt;View -&amp;gt; Tool Windows -&amp;gt; TODO or (Alt + 6)&lt;/strong&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/intellij-todo/todo1.png&quot; alt=&quot;TODO Tool window&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You have all your TODO Comment displayed over here. You have 3 option to limit your scope. It means if you select “Project” scope, scan happens on all project files. For more information, you can refer: &lt;a href=&quot;https://www.jetbrains.com/help/idea/todo-tool-window.html&quot;&gt;TODO tool Window&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&quot;how-to-create-custom-todo-pattern&quot;&gt;How to create Custom TODO pattern?&lt;/h3&gt;

&lt;p&gt;You can define your own TODO pattern in IntelliJ.Once you add this pattern, IntelliJ scan for this pattern and display matching items in IntelliJ tool window.  Go to &lt;strong&gt;Setting -&amp;gt; Editor -&amp;gt; TODO &lt;/strong&gt;for adding new pattern&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/intellij-todo/todo2.png&quot; alt=&quot;Add TODO pattern&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see we have 2 default pattern already configured. Click on Plus Icon to add new Pattern&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/intellij-todo/todo3.png&quot; alt=&quot;Add new TODO Pattern&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You need to define Your pattern here. I have configured &lt;strong&gt;\bhello\b.* &lt;/strong&gt;which will map all comment starting from hello. You can use &lt;a href=&quot;https://www.jetbrains.com/help/idea/regular-expression-syntax-reference.html&quot;&gt;Regular Expression Syntax Reference&lt;/a&gt; To define Your Pattern. You can also change the color scheme of comment also. After saving changes you can able to see all your comment starting with &lt;strong&gt;Hello &lt;/strong&gt;in TODO tool Window&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/intellij-todo/todo4.png&quot; alt=&quot;View custom TODO comment&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;todo-comment-with-refactoring-&quot;&gt;TODO comment with Refactoring :&lt;/h3&gt;

&lt;p&gt;Now we know how to add TODO pattern we can use it in our refactoring. When I start Refactoring I have one JIRA Id for a task. I will create one TODO pattern with this Id. For example, I have 1245 as Jira Id so I create a pattern like &lt;strong&gt;\b1245\b.*.  &lt;/strong&gt;After this, I will start my code analysis and when I need to add some points I will add a comment with 1245 in a prefix. Now I can see all comments in TODO tool window.&lt;/p&gt;

&lt;p&gt;In a large project, It is possible that you have so many TODO comments. Finding particular comment will become a pain in such situations. You can create your TODO filter so that Only specific comments will be filtered.&lt;/p&gt;

&lt;h3 id=&quot;create-todo-filter&quot;&gt;Create TODO Filter:&lt;/h3&gt;

&lt;p&gt;Go to &lt;strong&gt;Setting -&amp;gt; Editor -&amp;gt; TODO &lt;/strong&gt;and click plus to add a filter.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/intellij-todo/todo5.png&quot; alt=&quot;Add TODO filter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select Pattern which will be included in this filter and save changes. Now on TODO tool window open filter menu.&lt;img src=&quot;/assets/img/intellij-todo/todo6.png&quot; alt=&quot;&quot; /&gt; Select Your filter and your all comment will be filtered by selected pattern.&lt;/p&gt;

&lt;p&gt;Now I have all my comment filtered, I can work on my code to resolve it. Now It’s easy to go to impacted code through TODO tool. I also can track how much work is pending by a number of comments in TODO tool window.&lt;/p&gt;

&lt;p&gt;When I am done with refactoring and committing my code, I can select  “&lt;strong&gt;Check TODO&lt;/strong&gt;” options in my “&lt;strong&gt;Before Commit”&lt;/strong&gt; section. What it will do is scan all files and check if any TODO item is pending or not. You can also apply a filter to scan particular pattern.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/intellij-todo/todo7.png&quot; alt=&quot;Scan TODO while Commit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion:&lt;/h3&gt;

&lt;p&gt;I developed this technique over the time while working on many refactoring tasks. This is like creating my refactoring checklist which tracks my progress. By doing this systematically we can reduce the probability of bugs.&lt;/p&gt;

&lt;p&gt;I am happy to have some feedback to improve this technique further&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Dec 2017 15:40:11 +0530</pubDate>
      </item>
    
      <item>
        <title>This is how my complete development setup looks like</title>
        <link>/2017/11/24/this-is-how-my-complete-development-setup-looks-like.html</link>
        <guid isPermaLink="true">/2017/11/24/this-is-how-my-complete-development-setup-looks-like.html</guid>
        <description>&lt;p&gt;It’s been almost 2 years since my Professional career started. In these years, I always have some struggle to decide stable development setup which works for me. I went through many blogs to decide stable setup but didn’t work for me. The main reason for this is my custom workflow. I have my preferences which may not work for others. This post will give some clarification of tools which are on my laptop.&lt;/p&gt;

&lt;h3 id=&quot;operating-system-os&quot;&gt;Operating System (OS)&lt;/h3&gt;

&lt;p&gt;There is no doubt about OS which is currently on my laptop. It’s Linux. Linux will never disappoint any developer. I started programming on the windows machine. With time when stuff gets complex and windows didn’t sustain. I was spending more time to solve windows problem rather than my actual problem. The amount of my productivity eaten by windows machine is so high that I finally decided to format my laptop and Installed Linux&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/my-dev-setup/image1.jpg&quot; alt=&quot;windows vs mac vs Linux&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One can argue about which flavor is better than other. One can choose CentOs over Ubuntu or Fedora on their preference. I used Ubuntu only and since then didn’t face any situation to change. The biggest benefit of Ubuntu is their support. There is a huge community out there to support any of your system problems.&lt;/p&gt;

&lt;h3 id=&quot;browser&quot;&gt;Browser&lt;/h3&gt;

&lt;p&gt;There are two browsers on my laptop, &lt;a href=&quot;https://www.chromium.org/&quot;&gt;Chromium&lt;/a&gt; and &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/&quot;&gt;Firefox.&lt;/a&gt; I am using Chromium because of the interface which I am using for many years. I know most of the shortcut keys on Chromium which increase my productivity. Chrome web store has many good plugins which I am using for a long time. I only open Firefox to test UI because the project on which I am working support these two browsers. &lt;/p&gt;

&lt;h4 id=&quot;pinned-tab-vs-bookmarks&quot;&gt;Pinned tab vs Bookmarks&lt;/h4&gt;

&lt;p&gt;I have many websites which are used frequently in my day to day life. I prefer to have pinned tab over bookmarks because&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can access these sites by chrome tab shortcut keys ( Ctrl + ‘tab number’ ) rather than opening it from bookmarks&lt;/li&gt;
  &lt;li&gt;If there is any notification, you can see from tab header. In bookmarks, you can’t know about notification until opening it&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/my-dev-setup/image2.png&quot; alt=&quot;Pinned tab&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I have following websites in my tab list&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LinkedIn&lt;/li&gt;
  &lt;li&gt;Twitter&lt;/li&gt;
  &lt;li&gt;Gmail&lt;/li&gt;
  &lt;li&gt;Evernote&lt;/li&gt;
  &lt;li&gt;Stack overflow&lt;/li&gt;
  &lt;li&gt;Google Calander&lt;/li&gt;
  &lt;li&gt;WordPress Dashboard of this site&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;terminal&quot;&gt;&lt;strong&gt;Terminal&lt;/strong&gt;&lt;/h3&gt;

&lt;h4 id=&quot;terminator&quot;&gt;&lt;a href=&quot;https://apps.ubuntu.com/cat/applications/quantal/terminator/&quot;&gt;Terminator&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;First thing I do when I start my laptop is open terminal. I have a habit of opening any tool from command line even though it is in my sidebar. I use &lt;a href=&quot;https://apps.ubuntu.com/cat/applications/quantal/terminator/&quot;&gt;Terminator&lt;/a&gt; instead of default terminal. The main reason to use Terminator is you can open many terminals in one window. Also, it is providing many shortcuts to switch between tabs. Most of the time I am on terminal debugging server by logs. By having many terminals I can run the command in one and watch for logs in other.&lt;/p&gt;

&lt;h4 id=&quot;oh-my-zsh&quot;&gt;&lt;a href=&quot;http://ohmyz.sh/&quot;&gt;Oh My ZSH!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sometimes it is frustrating to write entire command to default bash. This open source project will provide you many functions and plugin which you can use to increase your productivity. As far as I know, this contains aliases and wrapper function of all command which I use in day to day life. If you don’t find command in this you can also create your own aliases and function. Next time onward rather than typing entire command you can call aliases or a function.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can install ZSH by following &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH&quot;&gt;this steps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins&quot;&gt;List of ZSH plugins&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;I am using following plugins&lt;/li&gt;
      &lt;li&gt;plugins=(git history mvn lol last-working-dir jira common-aliases vagrant zsh-autosuggestions)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://askubuntu.com/questions/253812/change-default-shell-for-terminator&quot;&gt;Enable ZSH in your Terminator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My Custom Aliases:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Git Push current branch and create remote branch&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gpn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'git push -u origin $(git branch | grep \* | cut -d '&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' -f2)'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Force push current branch&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gpf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'git push -f origin $(git branch | grep \* | cut -d '&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' -f2)'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Git push current branch&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'git push origin $(git branch | grep \* | cut -d '&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' -f2)'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I am using this extra 3 aliases for Git. By doing this I did not need to write entire command again and again. &lt;a href=&quot;https://askubuntu.com/questions/31216/setting-up-aliases-in-zsh&quot;&gt;Please refer this to set aliases in zsh&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;vagrant&quot;&gt;Vagrant&lt;/h3&gt;

&lt;p&gt;2 years ago when I needed to install Oracle and MySQL on my laptop. It took me 2 days to just install this two stuff. After doing all this I found out that I installed an older version of MySQL. While removing MySQL, I had done something wrong that I am not able to install new MySQL. This should not be acceptable. Then I spend the entire weekend to find the alternative solution to this problem. I need a solution that is quick and doesn’t screw my laptop. This is How I found &lt;strong&gt;&lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;. &lt;/strong&gt;It took only 2 hours to install both databases on my laptop. with vagrant, I can remove or add stuff without changing anything on my Host machine.&lt;/p&gt;

&lt;h3 id=&quot;intellij&quot;&gt;IntelliJ&lt;/h3&gt;

&lt;p&gt;IDE is a weapon to any developer without it, you can not survive. One can write a simple program in notepad without IDE but when we talk about large-scale application, IDE is key for fast delivery. When someone solving a bug or adding new feature in project having hundreds of files, One can not succeed with simple notepad&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/my-dev-setup/612022.png&quot; alt=&quot;Life without IDE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From last 2 years, I am using IntelliJ IDEA. I am so happy with it that I didn’t try any other IDE. I don’t have a comparison of IDEA with other IDE but after using it so long I know shortcuts for all the action which frequently occur in developer’s life. I can code in many languages without changing IDE every time. I have modified default setting according to my need which I will share in a future post.&lt;/p&gt;

&lt;p&gt;With this post, I tried to share my experience and difficulty which I faced while coding. I also tried to find a solution to these problems. Something might be done differently to get a better result and I am happy to try new things.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Nov 2017 23:33:19 +0530</pubDate>
      </item>
    
      <item>
        <title>Introduction to Postman REST client</title>
        <link>/2017/11/11/introduction-postman-rest-client.html</link>
        <guid isPermaLink="true">/2017/11/11/introduction-postman-rest-client.html</guid>
        <description>&lt;blockquote&gt;
  &lt;h3 id=&quot;summary&quot;&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h3&gt;

  &lt;p&gt;The Postman is a feature rich REST client. Thousands of developers used it to browse, test and even documenting APIs. This post aims to provide basic information you need to start using Postman&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Started in 2012 with the idea of REST client Postman has improved itself to support all the feature you need for API development and testing. According to officials in 2014, it has 3+ million active users. You can make HTTP requests like GET,  POST,  PUT,  DELETE from it. You can also perform automation test on your API using it. With monitoring feature, you can execute set of requests to check for its performance and response&lt;/p&gt;

&lt;p&gt;It’s available as a Chrome extension and native app build on The Electron. I recommended using the native app because Chrome extension will be deprecated soon.  You can download it from &lt;a href=&quot;https://www.getpostman.com/apps&quot;&gt;here.&lt;/a&gt; In this post, we will use service call &lt;a href=&quot;https://docs.postman-echo.com/&quot;&gt;Postman Echo&lt;/a&gt; to mock our API&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&quot;send-your-first-request&quot;&gt;Send your first request&lt;/h3&gt;

&lt;p&gt;Calling API from Postman is like a cakewalk. For simplicity, we will do a GET request to the server&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/postman/blog1.png&quot; alt=&quot;Screenshot of postman app while sending Request&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;URL of API&lt;/li&gt;
  &lt;li&gt;Request Type [GET, POST, PUT, DELETE]&lt;/li&gt;
  &lt;li&gt;Send button To call the API&lt;/li&gt;
  &lt;li&gt;Response Of API&lt;/li&gt;
  &lt;li&gt;More information&lt;/li&gt;
  &lt;li&gt;History of past API calls&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;send-post-data-withrequest&quot;&gt;Send Post data with Request:&lt;/h5&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/postman/blogrequest.png&quot; alt=&quot;Post Request with Postman&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While doing a POST request to the API you need to pass some data as a body. As given in the screenshot above, you can pass data while calling your API&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/postman/blogresonse.png&quot; alt=&quot;Post Request Response&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;collections&quot;&gt;Collections&lt;/h3&gt;

&lt;p&gt;Postman provides good way to Organize your related request. It’s called &lt;strong&gt;Collections. &lt;/strong&gt;It’s like folder structure so you can browse API. Also You can use collections with Test script but this will be explained later. You can create and browse Collection as displayed below&lt;/p&gt;

&lt;div class=&quot;image-wrapper center&quot;&gt;
    &lt;img src=&quot;/assets/img/postman/createCollection1.png&quot; alt=&quot;Click New Button to Add Collection&quot; /&gt;
    
        &lt;p class=&quot;image-caption&quot;&gt;Click New Button to Add Collection&lt;/p&gt;
    
&lt;/div&gt;

&lt;div class=&quot;image-wrapper center&quot;&gt;
    &lt;img src=&quot;/assets/img/postman/createcollection2.png&quot; alt=&quot;Provide Collection name and detail and then save Collection&quot; /&gt;
    
        &lt;p class=&quot;image-caption&quot;&gt;Provide Collection name and detail and then save Collection&lt;/p&gt;
    
&lt;/div&gt;

&lt;div class=&quot;image-wrapper center&quot;&gt;
    &lt;img src=&quot;/assets/img/postman/createcollection3.png&quot; alt=&quot;Click On save button to add a request to the Collection&quot; /&gt;
    
        &lt;p class=&quot;image-caption&quot;&gt;Click On save button to add a request to the Collection&lt;/p&gt;
    
&lt;/div&gt;

&lt;div class=&quot;image-wrapper center&quot;&gt;
    &lt;img src=&quot;/assets/img/postman/createcollection4.png&quot; alt=&quot;Add detail and select collection&quot; /&gt;
    
        &lt;p class=&quot;image-caption&quot;&gt;Add detail and select collection&lt;/p&gt;
    
&lt;/div&gt;

&lt;div class=&quot;image-wrapper center&quot;&gt;
    &lt;img src=&quot;/assets/img/postman/createcollection5.png&quot; alt=&quot;Form collection tab you can access your Collections&quot; /&gt;
    
        &lt;p class=&quot;image-caption&quot;&gt;Form collection tab you can access your Collections&lt;/p&gt;
    
&lt;/div&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;When you have different frontend and backend team, REST API design is the most important part.  Frontend team doesn’t want to refactor their code because of misunderstanding about API design. Postman solves this problem with the concept called &lt;strong&gt;“Example”.&lt;/strong&gt; You can save request/response parameter of your API as an Example. After saving your Example, You can share it with the team. You can also create a mock server with Postman mock server. frontend team can use it as an alternative to actual API&lt;/p&gt;

&lt;div class=&quot;image-wrapper center&quot;&gt;
    &lt;img src=&quot;/assets/img/postman/e1.png&quot; alt=&quot;Click on Add Example&quot; /&gt;
    
        &lt;p class=&quot;image-caption&quot;&gt;Click on Add Example&lt;/p&gt;
    
&lt;/div&gt;

&lt;div class=&quot;image-wrapper center&quot;&gt;
    &lt;img src=&quot;/assets/img/postman/e2.png&quot; alt=&quot;Add request and response detail&quot; /&gt;
    
        &lt;p class=&quot;image-caption&quot;&gt;Add request and response detail&lt;/p&gt;
    
&lt;/div&gt;

&lt;div class=&quot;image-wrapper center&quot;&gt;
    &lt;img src=&quot;/assets/img/postman/e3.png&quot; alt=&quot;Access Example&quot; /&gt;
    
        &lt;p class=&quot;image-caption&quot;&gt;Access Example&lt;/p&gt;
    
&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Postman &lt;/strong&gt;is a day to day tool for any developer.  Any backend developer can quickly check his API without any frontend application. Also, the developer can write test script which will help them to do impact analysis of their change on API. Frontend developer can use this as an alternative to actual API which will make them independent of backend team&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
        <pubDate>Sat, 11 Nov 2017 19:16:22 +0530</pubDate>
      </item>
    
  </channel>
</rss>
